"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from midday.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateTrackerProjectStatus(str, Enum):
    r"""Current status of the project"""

    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"


class UpdateTrackerProjectTagTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the tag"""
    value: str
    r"""Display value of the tag"""


class UpdateTrackerProjectTag(BaseModel):
    id: str
    r"""Unique identifier of the tag"""

    value: str
    r"""Display value of the tag"""


class UpdateTrackerProjectRequestBodyTypedDict(TypedDict):
    name: str
    r"""Name of the project"""
    description: NotRequired[Nullable[str]]
    r"""Detailed description of the project"""
    estimate: NotRequired[Nullable[float]]
    r"""Estimated total hours required to complete the project"""
    billable: NotRequired[Nullable[bool]]
    r"""Whether the project is billable to the customer"""
    rate: NotRequired[Nullable[float]]
    r"""Hourly rate for the project in the specified currency"""
    currency: NotRequired[Nullable[str]]
    r"""Currency code for the project rate in ISO 4217 format"""
    status: NotRequired[UpdateTrackerProjectStatus]
    r"""Current status of the project"""
    customer_id: NotRequired[Nullable[str]]
    r"""Unique identifier of the customer associated with this project"""
    tags: NotRequired[Nullable[List[UpdateTrackerProjectTagTypedDict]]]
    r"""Array of tags to associate with the project"""


class UpdateTrackerProjectRequestBody(BaseModel):
    name: str
    r"""Name of the project"""

    description: OptionalNullable[str] = UNSET
    r"""Detailed description of the project"""

    estimate: OptionalNullable[float] = UNSET
    r"""Estimated total hours required to complete the project"""

    billable: OptionalNullable[bool] = False
    r"""Whether the project is billable to the customer"""

    rate: OptionalNullable[float] = UNSET
    r"""Hourly rate for the project in the specified currency"""

    currency: OptionalNullable[str] = UNSET
    r"""Currency code for the project rate in ISO 4217 format"""

    status: Optional[UpdateTrackerProjectStatus] = None
    r"""Current status of the project"""

    customer_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="customerId")
    ] = UNSET
    r"""Unique identifier of the customer associated with this project"""

    tags: OptionalNullable[List[UpdateTrackerProjectTag]] = UNSET
    r"""Array of tags to associate with the project"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "estimate",
            "billable",
            "rate",
            "currency",
            "status",
            "customerId",
            "tags",
        ]
        nullable_fields = [
            "description",
            "estimate",
            "billable",
            "rate",
            "currency",
            "customerId",
            "tags",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdateTrackerProjectRequestTypedDict(TypedDict):
    id: str
    request_body: NotRequired[UpdateTrackerProjectRequestBodyTypedDict]


class UpdateTrackerProjectRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        Optional[UpdateTrackerProjectRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
