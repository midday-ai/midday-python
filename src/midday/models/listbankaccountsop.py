"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
from midday.utils import FieldMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListBankAccountsRequestTypedDict(TypedDict):
    enabled: NotRequired[bool]
    manual: NotRequired[bool]


class ListBankAccountsRequest(BaseModel):
    enabled: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    manual: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class ListBankAccountsDataTypedDict(TypedDict):
    r"""A single bank account object response."""

    id: str
    r"""Unique identifier for the bank account."""
    name: Nullable[str]
    r"""Name of the bank account."""
    currency: Nullable[str]
    r"""Currency code of the bank account (e.g., USD, EUR)."""
    type: Nullable[str]
    r"""Type of the bank account (e.g., depository, credit)."""
    enabled: bool
    r"""Whether the bank account is enabled."""
    balance: Nullable[float]
    r"""Current balance of the bank account."""
    manual: Nullable[bool]
    r"""Whether the bank account is a manual account."""


class ListBankAccountsData(BaseModel):
    r"""A single bank account object response."""

    id: str
    r"""Unique identifier for the bank account."""

    name: Nullable[str]
    r"""Name of the bank account."""

    currency: Nullable[str]
    r"""Currency code of the bank account (e.g., USD, EUR)."""

    type: Nullable[str]
    r"""Type of the bank account (e.g., depository, credit)."""

    enabled: bool
    r"""Whether the bank account is enabled."""

    balance: Nullable[float]
    r"""Current balance of the bank account."""

    manual: Nullable[bool]
    r"""Whether the bank account is a manual account."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["name", "currency", "type", "balance", "manual"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListBankAccountsResponseTypedDict(TypedDict):
    r"""Response containing a list of bank accounts."""

    data: List[ListBankAccountsDataTypedDict]
    r"""Array of bank account objects."""


class ListBankAccountsResponse(BaseModel):
    r"""Response containing a list of bank accounts."""

    data: List[ListBankAccountsData]
    r"""Array of bank account objects."""
