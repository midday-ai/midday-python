"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
from midday.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class GetDocumentByIDRequestTypedDict(TypedDict):
    id: Nullable[str]


class GetDocumentByIDRequest(BaseModel):
    id: Annotated[
        Nullable[str],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetDocumentByIDMetadataTypedDict(TypedDict):
    r"""Metadata about the document."""

    size: Nullable[float]
    r"""Size of the document in bytes."""
    mimetype: Nullable[str]
    r"""MIME type of the document."""


class GetDocumentByIDMetadata(BaseModel):
    r"""Metadata about the document."""

    size: Nullable[float]
    r"""Size of the document in bytes."""

    mimetype: Nullable[str]
    r"""MIME type of the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["size", "mimetype"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetDocumentByIDResponseTypedDict(TypedDict):
    r"""A single document object response."""

    id: str
    r"""Unique identifier for the document."""
    title: Nullable[str]
    r"""Title of the document."""
    path_tokens: List[str]
    r"""Array of path tokens representing the document's location."""
    metadata: Nullable[GetDocumentByIDMetadataTypedDict]
    r"""Metadata about the document."""
    processing_status: str
    r"""Processing status of the document."""
    summary: Nullable[str]
    r"""Summary or extracted content from the document."""
    date_: Nullable[str]
    r"""Date associated with the document (ISO 8601)."""


class GetDocumentByIDResponse(BaseModel):
    r"""A single document object response."""

    id: str
    r"""Unique identifier for the document."""

    title: Nullable[str]
    r"""Title of the document."""

    path_tokens: Annotated[List[str], pydantic.Field(alias="pathTokens")]
    r"""Array of path tokens representing the document's location."""

    metadata: Nullable[GetDocumentByIDMetadata]
    r"""Metadata about the document."""

    processing_status: Annotated[str, pydantic.Field(alias="processingStatus")]
    r"""Processing status of the document."""

    summary: Nullable[str]
    r"""Summary or extracted content from the document."""

    date_: Annotated[Nullable[str], pydantic.Field(alias="date")]
    r"""Date associated with the document (ISO 8601)."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["title", "metadata", "summary", "date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
