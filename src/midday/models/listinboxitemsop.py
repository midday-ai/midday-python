"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from midday.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListInboxItemsStatus(str, Enum):
    DONE = "done"
    PENDING = "pending"


class ListInboxItemsRequestTypedDict(TypedDict):
    cursor: NotRequired[Nullable[str]]
    order: NotRequired[Nullable[str]]
    page_size: NotRequired[float]
    q: NotRequired[Nullable[str]]
    status: NotRequired[Nullable[ListInboxItemsStatus]]


class ListInboxItemsRequest(BaseModel):
    cursor: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    order: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    page_size: Annotated[
        Optional[float],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    q: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    status: Annotated[
        OptionalNullable[ListInboxItemsStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["cursor", "order", "pageSize", "q", "status"]
        nullable_fields = ["cursor", "order", "q", "status"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListInboxItemsMetaTypedDict(TypedDict):
    r"""Pagination metadata for the inbox list response."""

    has_previous_page: bool
    r"""Whether there is a previous page of results."""
    has_next_page: bool
    r"""Whether there is a next page of results."""
    cursor: NotRequired[Nullable[str]]
    r"""A cursor for pagination, representing the last item from the previous page."""


class ListInboxItemsMeta(BaseModel):
    r"""Pagination metadata for the inbox list response."""

    has_previous_page: Annotated[bool, pydantic.Field(alias="hasPreviousPage")]
    r"""Whether there is a previous page of results."""

    has_next_page: Annotated[bool, pydantic.Field(alias="hasNextPage")]
    r"""Whether there is a next page of results."""

    cursor: OptionalNullable[str] = UNSET
    r"""A cursor for pagination, representing the last item from the previous page."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["cursor"]
        nullable_fields = ["cursor"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListInboxItemsTransactionTypedDict(TypedDict):
    r"""Matched transaction for this inbox item, if any"""

    id: str
    r"""Transaction ID (UUID)"""
    amount: float
    r"""Transaction amount"""
    currency: str
    r"""Transaction currency (ISO 4217)"""
    name: str
    r"""Transaction name or payee"""
    date_: str
    r"""Transaction date (ISO 8601)"""


class ListInboxItemsTransaction(BaseModel):
    r"""Matched transaction for this inbox item, if any"""

    id: str
    r"""Transaction ID (UUID)"""

    amount: float
    r"""Transaction amount"""

    currency: str
    r"""Transaction currency (ISO 4217)"""

    name: str
    r"""Transaction name or payee"""

    date_: Annotated[str, pydantic.Field(alias="date")]
    r"""Transaction date (ISO 8601)"""


class ListInboxItemsDataTypedDict(TypedDict):
    r"""Inbox item object"""

    id: str
    r"""Inbox item ID (UUID)"""
    file_name: str
    r"""Original file name of the uploaded document"""
    file_path: List[str]
    r"""Path segments to the file in storage"""
    display_name: str
    r"""Display name for the inbox item"""
    amount: Nullable[float]
    r"""Amount detected or entered for the inbox item"""
    currency: Nullable[str]
    r"""Currency code (ISO 4217) for the amount"""
    content_type: Nullable[str]
    r"""MIME type of the uploaded file"""
    date_: Nullable[str]
    r"""Date associated with the inbox item (ISO 8601)"""
    status: str
    r"""Status of the inbox item"""
    created_at: str
    r"""Date and time when the inbox item was created (ISO 8601)"""
    website: Nullable[str]
    r"""Website associated with the inbox item, if any"""
    description: Nullable[str]
    r"""Description or notes for the inbox item"""
    transaction: Nullable[ListInboxItemsTransactionTypedDict]
    r"""Matched transaction for this inbox item, if any"""


class ListInboxItemsData(BaseModel):
    r"""Inbox item object"""

    id: str
    r"""Inbox item ID (UUID)"""

    file_name: Annotated[str, pydantic.Field(alias="fileName")]
    r"""Original file name of the uploaded document"""

    file_path: Annotated[List[str], pydantic.Field(alias="filePath")]
    r"""Path segments to the file in storage"""

    display_name: Annotated[str, pydantic.Field(alias="displayName")]
    r"""Display name for the inbox item"""

    amount: Nullable[float]
    r"""Amount detected or entered for the inbox item"""

    currency: Nullable[str]
    r"""Currency code (ISO 4217) for the amount"""

    content_type: Annotated[Nullable[str], pydantic.Field(alias="contentType")]
    r"""MIME type of the uploaded file"""

    date_: Annotated[Nullable[str], pydantic.Field(alias="date")]
    r"""Date associated with the inbox item (ISO 8601)"""

    status: str
    r"""Status of the inbox item"""

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]
    r"""Date and time when the inbox item was created (ISO 8601)"""

    website: Nullable[str]
    r"""Website associated with the inbox item, if any"""

    description: Nullable[str]
    r"""Description or notes for the inbox item"""

    transaction: Nullable[ListInboxItemsTransaction]
    r"""Matched transaction for this inbox item, if any"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "amount",
            "currency",
            "contentType",
            "date",
            "website",
            "description",
            "transaction",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListInboxItemsResponseTypedDict(TypedDict):
    r"""Retrieve a list of inbox items for the authenticated team."""

    meta: ListInboxItemsMetaTypedDict
    r"""Pagination metadata for the inbox list response."""
    data: List[ListInboxItemsDataTypedDict]
    r"""List of inbox items"""


class ListInboxItemsResponse(BaseModel):
    r"""Retrieve a list of inbox items for the authenticated team."""

    meta: ListInboxItemsMeta
    r"""Pagination metadata for the inbox list response."""

    data: List[ListInboxItemsData]
    r"""List of inbox items"""
