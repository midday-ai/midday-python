"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from midday.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateTransactionStatus(str, Enum):
    r"""Status of the transaction."""

    PENDING = "pending"
    ARCHIVED = "archived"
    COMPLETED = "completed"
    POSTED = "posted"
    EXCLUDED = "excluded"


class UpdateTransactionFrequency(str, Enum):
    r"""Recurring frequency of the transaction."""

    WEEKLY = "weekly"
    MONTHLY = "monthly"
    ANNUALLY = "annually"
    IRREGULAR = "irregular"


class UpdateTransactionRequestBodyTypedDict(TypedDict):
    category_slug: NotRequired[Nullable[str]]
    r"""Category slug for the transaction."""
    status: NotRequired[Nullable[UpdateTransactionStatus]]
    r"""Status of the transaction."""
    internal: NotRequired[bool]
    r"""Whether the transaction is internal."""
    recurring: NotRequired[bool]
    r"""Whether the transaction is recurring."""
    frequency: NotRequired[Nullable[UpdateTransactionFrequency]]
    r"""Recurring frequency of the transaction."""
    note: NotRequired[Nullable[str]]
    r"""Note for the transaction."""
    assigned_id: NotRequired[Nullable[str]]
    r"""Assigned user ID for the transaction."""


class UpdateTransactionRequestBody(BaseModel):
    category_slug: Annotated[
        OptionalNullable[str], pydantic.Field(alias="categorySlug")
    ] = UNSET
    r"""Category slug for the transaction."""

    status: OptionalNullable[UpdateTransactionStatus] = UNSET
    r"""Status of the transaction."""

    internal: Optional[bool] = None
    r"""Whether the transaction is internal."""

    recurring: Optional[bool] = None
    r"""Whether the transaction is recurring."""

    frequency: OptionalNullable[UpdateTransactionFrequency] = UNSET
    r"""Recurring frequency of the transaction."""

    note: OptionalNullable[str] = UNSET
    r"""Note for the transaction."""

    assigned_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="assignedId")
    ] = UNSET
    r"""Assigned user ID for the transaction."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "categorySlug",
            "status",
            "internal",
            "recurring",
            "frequency",
            "note",
            "assignedId",
        ]
        nullable_fields = ["categorySlug", "status", "frequency", "note", "assignedId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdateTransactionRequestTypedDict(TypedDict):
    id: str
    request_body: NotRequired[UpdateTransactionRequestBodyTypedDict]


class UpdateTransactionRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        Optional[UpdateTransactionRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
