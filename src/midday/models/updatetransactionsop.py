"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .transactionresponse import TransactionResponse, TransactionResponseTypedDict
from enum import Enum
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateTransactionsStatus(str, Enum):
    r"""Status to set for the transactions."""

    PENDING = "pending"
    ARCHIVED = "archived"
    COMPLETED = "completed"
    POSTED = "posted"
    EXCLUDED = "excluded"


class UpdateTransactionsFrequency(str, Enum):
    r"""Recurring frequency to set for the transactions."""

    WEEKLY = "weekly"
    MONTHLY = "monthly"
    ANNUALLY = "annually"
    IRREGULAR = "irregular"


class UpdateTransactionsRequestTypedDict(TypedDict):
    ids: List[str]
    r"""Array of transaction IDs to update."""
    category_slug: NotRequired[Nullable[str]]
    r"""Category slug for the transactions."""
    status: NotRequired[Nullable[UpdateTransactionsStatus]]
    r"""Status to set for the transactions."""
    frequency: NotRequired[Nullable[UpdateTransactionsFrequency]]
    r"""Recurring frequency to set for the transactions."""
    internal: NotRequired[bool]
    r"""Whether the transactions are internal."""
    note: NotRequired[Nullable[str]]
    r"""Note to set for the transactions."""
    assigned_id: NotRequired[Nullable[str]]
    r"""Assigned user ID for the transactions."""
    recurring: NotRequired[bool]
    r"""Whether the transactions are recurring."""
    tag_id: NotRequired[Nullable[str]]
    r"""Tag ID to set for the transactions."""


class UpdateTransactionsRequest(BaseModel):
    ids: List[str]
    r"""Array of transaction IDs to update."""

    category_slug: Annotated[
        OptionalNullable[str], pydantic.Field(alias="categorySlug")
    ] = UNSET
    r"""Category slug for the transactions."""

    status: OptionalNullable[UpdateTransactionsStatus] = UNSET
    r"""Status to set for the transactions."""

    frequency: OptionalNullable[UpdateTransactionsFrequency] = UNSET
    r"""Recurring frequency to set for the transactions."""

    internal: Optional[bool] = None
    r"""Whether the transactions are internal."""

    note: OptionalNullable[str] = UNSET
    r"""Note to set for the transactions."""

    assigned_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="assignedId")
    ] = UNSET
    r"""Assigned user ID for the transactions."""

    recurring: Optional[bool] = None
    r"""Whether the transactions are recurring."""

    tag_id: Annotated[OptionalNullable[str], pydantic.Field(alias="tagId")] = UNSET
    r"""Tag ID to set for the transactions."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "categorySlug",
            "status",
            "frequency",
            "internal",
            "note",
            "assignedId",
            "recurring",
            "tagId",
        ]
        nullable_fields = [
            "categorySlug",
            "status",
            "frequency",
            "note",
            "assignedId",
            "tagId",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdateTransactionsMetaTypedDict(TypedDict):
    r"""Pagination metadata for the transactions response"""

    has_previous_page: bool
    r"""Whether there are more transactions available on the previous page"""
    has_next_page: bool
    r"""Whether there are more transactions available on the next page"""
    cursor: NotRequired[str]
    r"""Cursor for the next page of results, undefined if no more pages"""


class UpdateTransactionsMeta(BaseModel):
    r"""Pagination metadata for the transactions response"""

    has_previous_page: Annotated[bool, pydantic.Field(alias="hasPreviousPage")]
    r"""Whether there are more transactions available on the previous page"""

    has_next_page: Annotated[bool, pydantic.Field(alias="hasNextPage")]
    r"""Whether there are more transactions available on the next page"""

    cursor: Optional[str] = None
    r"""Cursor for the next page of results, undefined if no more pages"""


class UpdateTransactionsResponseTypedDict(TypedDict):
    r"""Transactions updated"""

    meta: UpdateTransactionsMetaTypedDict
    r"""Pagination metadata for the transactions response"""
    data: List[TransactionResponseTypedDict]
    r"""Array of transactions matching the query criteria"""


class UpdateTransactionsResponse(BaseModel):
    r"""Transactions updated"""

    meta: UpdateTransactionsMeta
    r"""Pagination metadata for the transactions response"""

    data: List[TransactionResponse]
    r"""Array of transactions matching the query criteria"""
