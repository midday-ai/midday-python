"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
from midday.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class ListTeamMembersRequestTypedDict(TypedDict):
    id: str


class ListTeamMembersRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


class Role(str, Enum):
    r"""Role of the team member. 'owner' has full permissions, 'member' has limited permissions"""

    OWNER = "owner"
    MEMBER = "member"


class ListTeamMembersDataTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the user"""
    role: Role
    r"""Role of the team member. 'owner' has full permissions, 'member' has limited permissions"""
    full_name: str
    r"""Full name of the team member"""
    avatar_url: Nullable[str]
    r"""URL to the team member's avatar image"""


class ListTeamMembersData(BaseModel):
    id: str
    r"""Unique identifier of the user"""

    role: Role
    r"""Role of the team member. 'owner' has full permissions, 'member' has limited permissions"""

    full_name: Annotated[str, pydantic.Field(alias="fullName")]
    r"""Full name of the team member"""

    avatar_url: Annotated[Nullable[str], pydantic.Field(alias="avatarUrl")]
    r"""URL to the team member's avatar image"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["avatarUrl"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListTeamMembersResponseTypedDict(TypedDict):
    r"""Team members"""

    data: List[ListTeamMembersDataTypedDict]
    r"""Array of team members with their roles and information"""


class ListTeamMembersResponse(BaseModel):
    r"""Team members"""

    data: List[ListTeamMembersData]
    r"""Array of team members with their roles and information"""
