"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class TrackerProjectResponseStatus(str, Enum):
    r"""Current status of the project"""

    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"


class CustomerTypedDict(TypedDict):
    r"""Customer information associated with the project"""

    id: str
    r"""Unique identifier of the customer"""
    name: str
    r"""Name of the customer or organization"""
    website: str
    r"""Website URL of the customer"""


class Customer(BaseModel):
    r"""Customer information associated with the project"""

    id: str
    r"""Unique identifier of the customer"""

    name: str
    r"""Name of the customer or organization"""

    website: str
    r"""Website URL of the customer"""


class TrackerProjectResponseTagTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the tag"""
    name: str
    r"""Display name of the tag"""


class TrackerProjectResponseTag(BaseModel):
    id: str
    r"""Unique identifier of the tag"""

    name: str
    r"""Display name of the tag"""


class UserTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the user"""
    full_name: str
    r"""Full name of the user"""
    avatar_url: str
    r"""URL to the user's avatar image"""


class User(BaseModel):
    id: str
    r"""Unique identifier of the user"""

    full_name: Annotated[str, pydantic.Field(alias="fullName")]
    r"""Full name of the user"""

    avatar_url: Annotated[str, pydantic.Field(alias="avatarUrl")]
    r"""URL to the user's avatar image"""


class TrackerProjectResponseTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the project"""
    name: str
    r"""Name of the project"""
    description: Nullable[str]
    r"""Detailed description of the project"""
    status: TrackerProjectResponseStatus
    r"""Current status of the project"""
    estimate: Nullable[float]
    r"""Estimated total hours required to complete the project"""
    currency: Nullable[str]
    r"""Currency code for the project rate in ISO 4217 format"""
    created_at: str
    r"""Date and time when the project was created in ISO 8601 format"""
    total_duration: Nullable[float]
    r"""Total tracked time for the project in seconds"""
    total_amount: float
    r"""Total monetary amount earned from the project"""
    customer: Nullable[CustomerTypedDict]
    r"""Customer information associated with the project"""
    tags: List[TrackerProjectResponseTagTypedDict]
    r"""Array of tags associated with the project"""
    users: Nullable[List[UserTypedDict]]
    r"""Array of users assigned to work on the project"""


class TrackerProjectResponse(BaseModel):
    id: str
    r"""Unique identifier of the project"""

    name: str
    r"""Name of the project"""

    description: Nullable[str]
    r"""Detailed description of the project"""

    status: TrackerProjectResponseStatus
    r"""Current status of the project"""

    estimate: Nullable[float]
    r"""Estimated total hours required to complete the project"""

    currency: Nullable[str]
    r"""Currency code for the project rate in ISO 4217 format"""

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]
    r"""Date and time when the project was created in ISO 8601 format"""

    total_duration: Annotated[Nullable[float], pydantic.Field(alias="totalDuration")]
    r"""Total tracked time for the project in seconds"""

    total_amount: Annotated[float, pydantic.Field(alias="totalAmount")]
    r"""Total monetary amount earned from the project"""

    customer: Nullable[Customer]
    r"""Customer information associated with the project"""

    tags: List[TrackerProjectResponseTag]
    r"""Array of tags associated with the project"""

    users: Nullable[List[User]]
    r"""Array of users assigned to work on the project"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "description",
            "estimate",
            "currency",
            "totalDuration",
            "customer",
            "users",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
