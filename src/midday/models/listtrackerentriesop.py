"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
from midday.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListTrackerEntriesRequestTypedDict(TypedDict):
    from_: str
    to: str
    project_id: NotRequired[str]


class ListTrackerEntriesRequest(BaseModel):
    from_: Annotated[
        str,
        pydantic.Field(alias="from"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    to: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    project_id: Annotated[
        Optional[str],
        pydantic.Field(alias="projectId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class ListTrackerEntriesMetaTypedDict(TypedDict):
    r"""Metadata about the tracker entries response including totals and date range"""

    total_duration: float
    r"""Total duration of all tracker entries in the response in seconds"""
    total_amount: float
    r"""Total monetary amount for all tracker entries in the response"""
    from_: str
    r"""Start date of the queried range in YYYY-MM-DD format"""
    to: str
    r"""End date of the queried range in YYYY-MM-DD format"""


class ListTrackerEntriesMeta(BaseModel):
    r"""Metadata about the tracker entries response including totals and date range"""

    total_duration: Annotated[float, pydantic.Field(alias="totalDuration")]
    r"""Total duration of all tracker entries in the response in seconds"""

    total_amount: Annotated[float, pydantic.Field(alias="totalAmount")]
    r"""Total monetary amount for all tracker entries in the response"""

    from_: Annotated[str, pydantic.Field(alias="from")]
    r"""Start date of the queried range in YYYY-MM-DD format"""

    to: str
    r"""End date of the queried range in YYYY-MM-DD format"""


class ListTrackerEntriesUserTypedDict(TypedDict):
    r"""User information for the person who created this tracker entry"""

    id: str
    r"""Unique identifier of the user"""
    full_name: str
    r"""Full name of the user"""
    avatar_url: str
    r"""URL to the user's avatar image"""


class ListTrackerEntriesUser(BaseModel):
    r"""User information for the person who created this tracker entry"""

    id: str
    r"""Unique identifier of the user"""

    full_name: Annotated[str, pydantic.Field(alias="fullName")]
    r"""Full name of the user"""

    avatar_url: Annotated[str, pydantic.Field(alias="avatarUrl")]
    r"""URL to the user's avatar image"""


class ListTrackerEntriesCustomerTypedDict(TypedDict):
    r"""Customer information associated with the project"""

    id: str
    r"""Unique identifier of the customer"""
    name: str
    r"""Name of the customer or organization"""


class ListTrackerEntriesCustomer(BaseModel):
    r"""Customer information associated with the project"""

    id: str
    r"""Unique identifier of the customer"""

    name: str
    r"""Name of the customer or organization"""


class ProjectTypedDict(TypedDict):
    r"""Project information associated with this tracker entry"""

    id: str
    r"""Unique identifier of the project"""
    created_at: str
    r"""Date and time when the project was created in ISO 8601 format"""
    rate: float
    r"""Default hourly rate for the project"""
    currency: str
    r"""Currency code for the project rate in ISO 4217 format"""
    status: str
    r"""Current status of the project"""
    description: str
    r"""Description of the project"""
    name: str
    r"""Name of the project"""
    billable: bool
    r"""Whether the project is billable to the customer"""
    estimate: float
    r"""Estimated total hours for the project"""
    customer: ListTrackerEntriesCustomerTypedDict
    r"""Customer information associated with the project"""


class Project(BaseModel):
    r"""Project information associated with this tracker entry"""

    id: str
    r"""Unique identifier of the project"""

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]
    r"""Date and time when the project was created in ISO 8601 format"""

    rate: float
    r"""Default hourly rate for the project"""

    currency: str
    r"""Currency code for the project rate in ISO 4217 format"""

    status: str
    r"""Current status of the project"""

    description: str
    r"""Description of the project"""

    name: str
    r"""Name of the project"""

    billable: bool
    r"""Whether the project is billable to the customer"""

    estimate: float
    r"""Estimated total hours for the project"""

    customer: ListTrackerEntriesCustomer
    r"""Customer information associated with the project"""


class ResultTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the tracker entry"""
    created_at: str
    r"""Date and time when the tracker entry was created in ISO 8601 format"""
    duration: float
    r"""Duration of the tracker entry in seconds"""
    start: str
    r"""Start time of the tracker entry in ISO 8601 format"""
    stop: str
    r"""Stop time of the tracker entry in ISO 8601 format"""
    team_id: str
    r"""Unique identifier of the team that owns this tracker entry"""
    description: Nullable[str]
    r"""Description or notes for the tracker entry"""
    rate: Nullable[float]
    r"""Hourly rate applied to this tracker entry"""
    currency: Nullable[str]
    r"""Currency code for the rate in ISO 4217 format"""
    billed: bool
    r"""Whether this tracker entry has been billed to the customer"""
    date_: str
    r"""Date of the tracker entry in YYYY-MM-DD format"""
    user: ListTrackerEntriesUserTypedDict
    r"""User information for the person who created this tracker entry"""
    project: ProjectTypedDict
    r"""Project information associated with this tracker entry"""


class Result(BaseModel):
    id: str
    r"""Unique identifier of the tracker entry"""

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]
    r"""Date and time when the tracker entry was created in ISO 8601 format"""

    duration: float
    r"""Duration of the tracker entry in seconds"""

    start: str
    r"""Start time of the tracker entry in ISO 8601 format"""

    stop: str
    r"""Stop time of the tracker entry in ISO 8601 format"""

    team_id: Annotated[str, pydantic.Field(alias="teamId")]
    r"""Unique identifier of the team that owns this tracker entry"""

    description: Nullable[str]
    r"""Description or notes for the tracker entry"""

    rate: Nullable[float]
    r"""Hourly rate applied to this tracker entry"""

    currency: Nullable[str]
    r"""Currency code for the rate in ISO 4217 format"""

    billed: bool
    r"""Whether this tracker entry has been billed to the customer"""

    date_: Annotated[str, pydantic.Field(alias="date")]
    r"""Date of the tracker entry in YYYY-MM-DD format"""

    user: ListTrackerEntriesUser
    r"""User information for the person who created this tracker entry"""

    project: Project
    r"""Project information associated with this tracker entry"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["description", "rate", "currency"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListTrackerEntriesResponseTypedDict(TypedDict):
    r"""List all tracker entries for the authenticated team."""

    meta: ListTrackerEntriesMetaTypedDict
    r"""Metadata about the tracker entries response including totals and date range"""
    result: Dict[str, List[ResultTypedDict]]
    r"""Tracker entries grouped by date, where each key is a date in YYYY-MM-DD format and the value is an array of tracker entries for that date"""


class ListTrackerEntriesResponse(BaseModel):
    r"""List all tracker entries for the authenticated team."""

    meta: ListTrackerEntriesMeta
    r"""Metadata about the tracker entries response including totals and date range"""

    result: Dict[str, List[Result]]
    r"""Tracker entries grouped by date, where each key is a date in YYYY-MM-DD format and the value is an array of tracker entries for that date"""
