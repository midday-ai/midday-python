"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from midday.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListDocumentsRequestTypedDict(TypedDict):
    cursor: NotRequired[Nullable[str]]
    sort: NotRequired[Nullable[List[str]]]
    page_size: NotRequired[float]
    q: NotRequired[Nullable[str]]
    tags: NotRequired[Nullable[List[str]]]


class ListDocumentsRequest(BaseModel):
    cursor: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    sort: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    page_size: Annotated[
        Optional[float],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    q: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    tags: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["cursor", "sort", "pageSize", "q", "tags"]
        nullable_fields = ["cursor", "sort", "q", "tags"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListDocumentsMetaTypedDict(TypedDict):
    r"""Pagination metadata for the documents list."""

    has_previous_page: bool
    r"""Whether there is a previous page."""
    has_next_page: bool
    r"""Whether there is a next page."""
    cursor: NotRequired[Nullable[str]]
    r"""Cursor for pagination."""


class ListDocumentsMeta(BaseModel):
    r"""Pagination metadata for the documents list."""

    has_previous_page: Annotated[bool, pydantic.Field(alias="hasPreviousPage")]
    r"""Whether there is a previous page."""

    has_next_page: Annotated[bool, pydantic.Field(alias="hasNextPage")]
    r"""Whether there is a next page."""

    cursor: OptionalNullable[str] = UNSET
    r"""Cursor for pagination."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["cursor"]
        nullable_fields = ["cursor"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListDocumentsMetadataTypedDict(TypedDict):
    r"""Metadata about the document."""

    size: Nullable[float]
    r"""Size of the document in bytes."""
    mimetype: Nullable[str]
    r"""MIME type of the document."""


class ListDocumentsMetadata(BaseModel):
    r"""Metadata about the document."""

    size: Nullable[float]
    r"""Size of the document in bytes."""

    mimetype: Nullable[str]
    r"""MIME type of the document."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["size", "mimetype"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListDocumentsDataTypedDict(TypedDict):
    r"""A single document object response."""

    id: str
    r"""Unique identifier for the document."""
    title: Nullable[str]
    r"""Title of the document."""
    path_tokens: List[str]
    r"""Array of path tokens representing the document's location."""
    metadata: Nullable[ListDocumentsMetadataTypedDict]
    r"""Metadata about the document."""
    processing_status: str
    r"""Processing status of the document."""
    summary: Nullable[str]
    r"""Summary or extracted content from the document."""
    date_: Nullable[str]
    r"""Date associated with the document (ISO 8601)."""


class ListDocumentsData(BaseModel):
    r"""A single document object response."""

    id: str
    r"""Unique identifier for the document."""

    title: Nullable[str]
    r"""Title of the document."""

    path_tokens: Annotated[List[str], pydantic.Field(alias="pathTokens")]
    r"""Array of path tokens representing the document's location."""

    metadata: Nullable[ListDocumentsMetadata]
    r"""Metadata about the document."""

    processing_status: Annotated[str, pydantic.Field(alias="processingStatus")]
    r"""Processing status of the document."""

    summary: Nullable[str]
    r"""Summary or extracted content from the document."""

    date_: Annotated[Nullable[str], pydantic.Field(alias="date")]
    r"""Date associated with the document (ISO 8601)."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["title", "metadata", "summary", "date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListDocumentsResponseTypedDict(TypedDict):
    r"""Response containing a list of documents and pagination metadata."""

    meta: ListDocumentsMetaTypedDict
    r"""Pagination metadata for the documents list."""
    data: List[ListDocumentsDataTypedDict]
    r"""Array of document objects."""


class ListDocumentsResponse(BaseModel):
    r"""Response containing a list of documents and pagination metadata."""

    meta: ListDocumentsMeta
    r"""Pagination metadata for the documents list."""

    data: List[ListDocumentsData]
    r"""Array of document objects."""
