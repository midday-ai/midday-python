"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from midday.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListCustomersRequestTypedDict(TypedDict):
    q: NotRequired[Nullable[str]]
    sort: NotRequired[Nullable[List[str]]]
    cursor: NotRequired[str]
    page_size: NotRequired[float]


class ListCustomersRequest(BaseModel):
    q: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    sort: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    page_size: Annotated[
        Optional[float],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["q", "sort", "cursor", "pageSize"]
        nullable_fields = ["q", "sort"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListCustomersMetaTypedDict(TypedDict):
    r"""Pagination metadata for the customers response"""

    cursor: Nullable[str]
    r"""Cursor for the next page of results, null if no more pages"""
    has_previous_page: bool
    r"""Whether there are more customers available on the previous page"""
    has_next_page: bool
    r"""Whether there are more customers available on the next page"""


class ListCustomersMeta(BaseModel):
    r"""Pagination metadata for the customers response"""

    cursor: Nullable[str]
    r"""Cursor for the next page of results, null if no more pages"""

    has_previous_page: Annotated[bool, pydantic.Field(alias="hasPreviousPage")]
    r"""Whether there are more customers available on the previous page"""

    has_next_page: Annotated[bool, pydantic.Field(alias="hasNextPage")]
    r"""Whether there are more customers available on the next page"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["cursor"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListCustomersTagTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the tag"""
    name: str
    r"""Display name of the tag"""


class ListCustomersTag(BaseModel):
    id: str
    r"""Unique identifier of the tag"""

    name: str
    r"""Display name of the tag"""


class ListCustomersDataTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the customer"""
    name: str
    r"""Name of the customer or organization"""
    email: str
    r"""Primary email address of the customer"""
    phone: Nullable[str]
    r"""Primary phone number of the customer"""
    website: Nullable[str]
    r"""Website URL of the customer"""
    created_at: str
    r"""Date and time when the customer was created in ISO 8601 format"""
    country: Nullable[str]
    r"""Country name where the customer is located"""
    address_line1: Nullable[str]
    r"""First line of the customer's address"""
    address_line2: Nullable[str]
    r"""Second line of the customer's address (suite, apartment, etc.)"""
    city: Nullable[str]
    r"""City where the customer is located"""
    state: Nullable[str]
    r"""State or province where the customer is located"""
    zip: Nullable[str]
    r"""ZIP or postal code of the customer's address"""
    note: Nullable[str]
    r"""Internal notes about the customer for team reference"""
    vat_number: Nullable[str]
    r"""VAT (Value Added Tax) number of the customer"""
    country_code: Nullable[str]
    r"""Country code in ISO 3166-1 alpha-2 format"""
    token: str
    r"""Unique token for the customer (used for internal identification)"""
    contact: Nullable[str]
    r"""Primary contact person's name at the customer organization"""
    invoice_count: float
    r"""Total number of invoices created for this customer"""
    project_count: float
    r"""Total number of projects associated with this customer"""
    tags: List[ListCustomersTagTypedDict]
    r"""Array of tags associated with the customer for categorization"""


class ListCustomersData(BaseModel):
    id: str
    r"""Unique identifier of the customer"""

    name: str
    r"""Name of the customer or organization"""

    email: str
    r"""Primary email address of the customer"""

    phone: Nullable[str]
    r"""Primary phone number of the customer"""

    website: Nullable[str]
    r"""Website URL of the customer"""

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]
    r"""Date and time when the customer was created in ISO 8601 format"""

    country: Nullable[str]
    r"""Country name where the customer is located"""

    address_line1: Annotated[Nullable[str], pydantic.Field(alias="addressLine1")]
    r"""First line of the customer's address"""

    address_line2: Annotated[Nullable[str], pydantic.Field(alias="addressLine2")]
    r"""Second line of the customer's address (suite, apartment, etc.)"""

    city: Nullable[str]
    r"""City where the customer is located"""

    state: Nullable[str]
    r"""State or province where the customer is located"""

    zip: Nullable[str]
    r"""ZIP or postal code of the customer's address"""

    note: Nullable[str]
    r"""Internal notes about the customer for team reference"""

    vat_number: Annotated[Nullable[str], pydantic.Field(alias="vatNumber")]
    r"""VAT (Value Added Tax) number of the customer"""

    country_code: Annotated[Nullable[str], pydantic.Field(alias="countryCode")]
    r"""Country code in ISO 3166-1 alpha-2 format"""

    token: str
    r"""Unique token for the customer (used for internal identification)"""

    contact: Nullable[str]
    r"""Primary contact person's name at the customer organization"""

    invoice_count: Annotated[float, pydantic.Field(alias="invoiceCount")]
    r"""Total number of invoices created for this customer"""

    project_count: Annotated[float, pydantic.Field(alias="projectCount")]
    r"""Total number of projects associated with this customer"""

    tags: List[ListCustomersTag]
    r"""Array of tags associated with the customer for categorization"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "phone",
            "website",
            "country",
            "addressLine1",
            "addressLine2",
            "city",
            "state",
            "zip",
            "note",
            "vatNumber",
            "countryCode",
            "contact",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListCustomersResponseTypedDict(TypedDict):
    r"""Retrieve a list of customers for the authenticated team."""

    meta: ListCustomersMetaTypedDict
    r"""Pagination metadata for the customers response"""
    data: List[ListCustomersDataTypedDict]
    r"""Array of customers matching the query criteria"""


class ListCustomersResponse(BaseModel):
    r"""Retrieve a list of customers for the authenticated team."""

    meta: ListCustomersMeta
    r"""Pagination metadata for the customers response"""

    data: List[ListCustomersData]
    r"""Array of customers matching the query criteria"""
