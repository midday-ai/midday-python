"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel
from midday.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetInvoiceSummaryStatus(str, Enum):
    r"""Filter summary by invoice status"""

    DRAFT = "draft"
    OVERDUE = "overdue"
    PAID = "paid"
    UNPAID = "unpaid"
    CANCELED = "canceled"


class GetInvoiceSummaryRequestTypedDict(TypedDict):
    status: NotRequired[GetInvoiceSummaryStatus]
    r"""Filter summary by invoice status"""


class GetInvoiceSummaryRequest(BaseModel):
    status: Annotated[
        Optional[GetInvoiceSummaryStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter summary by invoice status"""


class GetInvoiceSummaryResponseTypedDict(TypedDict):
    currency: str
    r"""Currency of the invoice"""
    total_amount: float
    r"""Total amount of the invoice"""
    invoice_count: float
    r"""Number of invoices for this currency"""


class GetInvoiceSummaryResponse(BaseModel):
    currency: str
    r"""Currency of the invoice"""

    total_amount: Annotated[float, pydantic.Field(alias="totalAmount")]
    r"""Total amount of the invoice"""

    invoice_count: Annotated[float, pydantic.Field(alias="invoiceCount")]
    r"""Number of invoices for this currency"""
