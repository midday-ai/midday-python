"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from midday.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SearchRequestTypedDict(TypedDict):
    search_term: NotRequired[str]
    language: NotRequired[str]
    limit: NotRequired[float]
    items_per_table_limit: NotRequired[float]
    relevance_threshold: NotRequired[float]


class SearchRequest(BaseModel):
    search_term: Annotated[
        Optional[str],
        pydantic.Field(alias="searchTerm"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    language: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 30

    items_per_table_limit: Annotated[
        Optional[float],
        pydantic.Field(alias="itemsPerTableLimit"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 5

    relevance_threshold: Annotated[
        Optional[float],
        pydantic.Field(alias="relevanceThreshold"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0.01


class SearchResponseTypedDict(TypedDict):
    id: str
    r"""Unique identifier for the search result item."""
    type: str
    r"""Type of the entity returned (e.g., invoice, customer, transaction)."""
    relevance: float
    r"""Relevance score for the search result."""
    created_at: str
    r"""ISO 8601 timestamp when the entity was created."""
    data: NotRequired[Nullable[Any]]
    r"""Additional data for the search result, structure depends on the type."""


class SearchResponse(BaseModel):
    id: str
    r"""Unique identifier for the search result item."""

    type: str
    r"""Type of the entity returned (e.g., invoice, customer, transaction)."""

    relevance: float
    r"""Relevance score for the search result."""

    created_at: str
    r"""ISO 8601 timestamp when the entity was created."""

    data: OptionalNullable[Any] = UNSET
    r"""Additional data for the search result, structure depends on the type."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["data"]
        nullable_fields = ["data"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
