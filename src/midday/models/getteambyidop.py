"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
from midday.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class GetTeamByIDRequestTypedDict(TypedDict):
    id: str


class GetTeamByIDRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


class GetTeamByIDPlan(str, Enum):
    r"""Current subscription plan of the team"""

    TRIAL = "trial"
    STARTER = "starter"
    PRO = "pro"


class GetTeamByIDResponseTypedDict(TypedDict):
    r"""Team details"""

    id: str
    r"""Unique identifier of the team"""
    name: str
    r"""Name of the team or organization"""
    logo_url: Nullable[str]
    r"""URL to the team's logo image"""
    plan: GetTeamByIDPlan
    r"""Current subscription plan of the team"""


class GetTeamByIDResponse(BaseModel):
    r"""Team details"""

    id: str
    r"""Unique identifier of the team"""

    name: str
    r"""Name of the team or organization"""

    logo_url: Annotated[Nullable[str], pydantic.Field(alias="logoUrl")]
    r"""URL to the team's logo image"""

    plan: GetTeamByIDPlan
    r"""Current subscription plan of the team"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["logoUrl"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
