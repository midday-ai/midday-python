"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class CategoryTypedDict(TypedDict):
    r"""Category information assigned to the transaction for organization"""

    id: str
    r"""Unique identifier of the category"""
    name: str
    r"""Display name of the category"""
    color: str
    r"""Hex color code associated with the category for UI display"""
    slug: str
    r"""URL-friendly slug of the category"""


class Category(BaseModel):
    r"""Category information assigned to the transaction for organization"""

    id: str
    r"""Unique identifier of the category"""

    name: str
    r"""Display name of the category"""

    color: str
    r"""Hex color code associated with the category for UI display"""

    slug: str
    r"""URL-friendly slug of the category"""


class ConnectionTypedDict(TypedDict):
    r"""Bank connection information associated with the account"""

    id: str
    r"""Unique identifier of the bank connection"""
    name: str
    r"""Name of the bank institution"""
    logo_url: Nullable[str]
    r"""URL to the bank institution's logo image"""


class Connection(BaseModel):
    r"""Bank connection information associated with the account"""

    id: str
    r"""Unique identifier of the bank connection"""

    name: str
    r"""Name of the bank institution"""

    logo_url: Annotated[Nullable[str], pydantic.Field(alias="logoUrl")]
    r"""URL to the bank institution's logo image"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["logoUrl"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class AccountTypedDict(TypedDict):
    r"""Bank account information associated with the transaction"""

    id: str
    r"""Unique identifier of the bank account"""
    name: str
    r"""Display name of the bank account"""
    currency: str
    r"""Currency of the bank account in ISO 4217 format"""
    connection: ConnectionTypedDict
    r"""Bank connection information associated with the account"""


class Account(BaseModel):
    r"""Bank account information associated with the transaction"""

    id: str
    r"""Unique identifier of the bank account"""

    name: str
    r"""Display name of the bank account"""

    currency: str
    r"""Currency of the bank account in ISO 4217 format"""

    connection: Connection
    r"""Bank connection information associated with the account"""


class TransactionResponseTagTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the tag"""
    name: Nullable[str]
    r"""Display name of the tag"""


class TransactionResponseTag(BaseModel):
    id: str
    r"""Unique identifier of the tag"""

    name: Nullable[str]
    r"""Display name of the tag"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["name"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class AttachmentTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the attachment"""
    path: List[str]
    r"""Array of path segments for the attachment file storage location"""
    size: float
    r"""Size of the attachment file in bytes"""
    type: str
    r"""MIME type of the attachment file"""
    filename: Nullable[str]
    r"""Original filename of the attachment when uploaded"""


class Attachment(BaseModel):
    id: str
    r"""Unique identifier of the attachment"""

    path: List[str]
    r"""Array of path segments for the attachment file storage location"""

    size: float
    r"""Size of the attachment file in bytes"""

    type: str
    r"""MIME type of the attachment file"""

    filename: Nullable[str]
    r"""Original filename of the attachment when uploaded"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["filename"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TransactionResponseTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the transaction"""
    name: str
    r"""Name or description of the transaction"""
    amount: float
    r"""Monetary amount of the transaction"""
    currency: str
    r"""Currency code of the transaction in ISO 4217 format"""
    date_: str
    r"""Date and time of the transaction in ISO 8601 format"""
    category: Nullable[CategoryTypedDict]
    r"""Category information assigned to the transaction for organization"""
    status: str
    r"""Current status of the transaction"""
    internal: Nullable[bool]
    r"""Whether the transaction is internal (between own accounts)"""
    recurring: Nullable[bool]
    r"""Whether the transaction is part of a recurring series"""
    manual: Nullable[bool]
    r"""Whether the transaction was created manually (via API/form) rather than imported from bank connections"""
    frequency: Nullable[str]
    r"""Frequency of the recurring transaction if applicable (weekly, monthly, annually, irregular)"""
    is_fulfilled: bool
    r"""Whether the transaction has been fulfilled or processed"""
    note: Nullable[str]
    r"""Optional note or memo attached to the transaction"""
    account: AccountTypedDict
    r"""Bank account information associated with the transaction"""
    tags: Nullable[List[TransactionResponseTagTypedDict]]
    r"""Array of tags associated with the transaction for categorization and filtering"""
    attachments: Nullable[List[AttachmentTypedDict]]
    r"""Array of file attachments associated with the transaction (receipts, invoices, etc.)"""


class TransactionResponse(BaseModel):
    id: str
    r"""Unique identifier of the transaction"""

    name: str
    r"""Name or description of the transaction"""

    amount: float
    r"""Monetary amount of the transaction"""

    currency: str
    r"""Currency code of the transaction in ISO 4217 format"""

    date_: Annotated[str, pydantic.Field(alias="date")]
    r"""Date and time of the transaction in ISO 8601 format"""

    category: Nullable[Category]
    r"""Category information assigned to the transaction for organization"""

    status: str
    r"""Current status of the transaction"""

    internal: Nullable[bool]
    r"""Whether the transaction is internal (between own accounts)"""

    recurring: Nullable[bool]
    r"""Whether the transaction is part of a recurring series"""

    manual: Nullable[bool]
    r"""Whether the transaction was created manually (via API/form) rather than imported from bank connections"""

    frequency: Nullable[str]
    r"""Frequency of the recurring transaction if applicable (weekly, monthly, annually, irregular)"""

    is_fulfilled: Annotated[bool, pydantic.Field(alias="isFulfilled")]
    r"""Whether the transaction has been fulfilled or processed"""

    note: Nullable[str]
    r"""Optional note or memo attached to the transaction"""

    account: Account
    r"""Bank account information associated with the transaction"""

    tags: Nullable[List[TransactionResponseTag]]
    r"""Array of tags associated with the transaction for categorization and filtering"""

    attachments: Nullable[List[Attachment]]
    r"""Array of file attachments associated with the transaction (receipts, invoices, etc.)"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "category",
            "internal",
            "recurring",
            "manual",
            "frequency",
            "note",
            "tags",
            "attachments",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
