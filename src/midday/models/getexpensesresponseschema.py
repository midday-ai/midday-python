"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .expensesresultarray import ExpensesResultArray, ExpensesResultArrayTypedDict
from midday.types import BaseModel
import pydantic
from typing import List
from typing_extensions import Annotated, TypedDict


class SummaryTypedDict(TypedDict):
    average_expense: float
    r"""Average expense over the period"""
    currency: str
    r"""Currency code (ISO 4217)"""


class Summary(BaseModel):
    average_expense: Annotated[float, pydantic.Field(alias="averageExpense")]
    r"""Average expense over the period"""

    currency: str
    r"""Currency code (ISO 4217)"""


class GetExpensesResponseSchemaMetaTypedDict(TypedDict):
    type: str
    r"""Type of metric"""
    currency: str
    r"""Currency code (ISO 4217)"""


class GetExpensesResponseSchemaMeta(BaseModel):
    type: str
    r"""Type of metric"""

    currency: str
    r"""Currency code (ISO 4217)"""


class GetExpensesResponseSchemaTypedDict(TypedDict):
    summary: SummaryTypedDict
    meta: GetExpensesResponseSchemaMetaTypedDict
    result: List[ExpensesResultArrayTypedDict]


class GetExpensesResponseSchema(BaseModel):
    summary: Summary

    meta: GetExpensesResponseSchemaMeta

    result: List[ExpensesResultArray]
