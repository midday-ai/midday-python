"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .transactionresponse import TransactionResponse, TransactionResponseTypedDict
from enum import Enum
from midday.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from midday.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Attachments(str, Enum):
    r"""Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments"""

    INCLUDE = "include"
    EXCLUDE = "exclude"


class ListTransactionsType(str, Enum):
    r"""Transaction type to filter by. 'income' for money received, 'expense' for money spent"""

    INCOME = "income"
    EXPENSE = "expense"


class ListTransactionsRequestTypedDict(TypedDict):
    cursor: NotRequired[Nullable[str]]
    sort: NotRequired[Nullable[List[str]]]
    page_size: NotRequired[float]
    q: NotRequired[Nullable[str]]
    categories: NotRequired[Nullable[List[str]]]
    tags: NotRequired[Nullable[List[str]]]
    start: NotRequired[Nullable[str]]
    end: NotRequired[Nullable[str]]
    accounts: NotRequired[Nullable[List[str]]]
    assignees: NotRequired[Nullable[List[str]]]
    statuses: NotRequired[Nullable[List[str]]]
    recurring: NotRequired[Nullable[List[str]]]
    attachments: NotRequired[Nullable[Attachments]]
    r"""Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments"""
    amount_range: NotRequired[Nullable[List[Nullable[float]]]]
    amount: NotRequired[Nullable[List[str]]]
    type: NotRequired[Nullable[ListTransactionsType]]
    r"""Transaction type to filter by. 'income' for money received, 'expense' for money spent"""


class ListTransactionsRequest(BaseModel):
    cursor: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    sort: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    page_size: Annotated[
        Optional[float],
        pydantic.Field(alias="pageSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    q: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    categories: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    tags: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    start: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    end: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    accounts: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    assignees: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    statuses: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    recurring: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    attachments: Annotated[
        OptionalNullable[Attachments],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments"""

    amount_range: Annotated[
        OptionalNullable[List[Nullable[float]]],
        pydantic.Field(alias="amountRange"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    amount: Annotated[
        OptionalNullable[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    type: Annotated[
        OptionalNullable[ListTransactionsType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Transaction type to filter by. 'income' for money received, 'expense' for money spent"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "cursor",
            "sort",
            "pageSize",
            "q",
            "categories",
            "tags",
            "start",
            "end",
            "accounts",
            "assignees",
            "statuses",
            "recurring",
            "attachments",
            "amountRange",
            "amount",
            "type",
        ]
        nullable_fields = [
            "cursor",
            "sort",
            "q",
            "categories",
            "tags",
            "start",
            "end",
            "accounts",
            "assignees",
            "statuses",
            "recurring",
            "attachments",
            "amountRange",
            "amount",
            "type",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListTransactionsMetaTypedDict(TypedDict):
    r"""Pagination metadata for the transactions response"""

    has_previous_page: bool
    r"""Whether there are more transactions available on the previous page"""
    has_next_page: bool
    r"""Whether there are more transactions available on the next page"""
    cursor: NotRequired[str]
    r"""Cursor for the next page of results, undefined if no more pages"""


class ListTransactionsMeta(BaseModel):
    r"""Pagination metadata for the transactions response"""

    has_previous_page: Annotated[bool, pydantic.Field(alias="hasPreviousPage")]
    r"""Whether there are more transactions available on the previous page"""

    has_next_page: Annotated[bool, pydantic.Field(alias="hasNextPage")]
    r"""Whether there are more transactions available on the next page"""

    cursor: Optional[str] = None
    r"""Cursor for the next page of results, undefined if no more pages"""


class ListTransactionsResponseTypedDict(TypedDict):
    r"""Retrieve a list of transactions for the authenticated team."""

    meta: ListTransactionsMetaTypedDict
    r"""Pagination metadata for the transactions response"""
    data: List[TransactionResponseTypedDict]
    r"""Array of transactions matching the query criteria"""


class ListTransactionsResponse(BaseModel):
    r"""Retrieve a list of transactions for the authenticated team."""

    meta: ListTransactionsMeta
    r"""Pagination metadata for the transactions response"""

    data: List[TransactionResponse]
    r"""Array of transactions matching the query criteria"""
