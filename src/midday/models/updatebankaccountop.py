"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from midday.types import BaseModel, Nullable, UNSET_SENTINEL
from midday.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateBankAccountType(str, Enum):
    r"""Type of the bank account."""

    DEPOSITORY = "depository"
    CREDIT = "credit"
    OTHER_ASSET = "other_asset"
    LOAN = "loan"
    OTHER_LIABILITY = "other_liability"


class UpdateBankAccountRequestBodyTypedDict(TypedDict):
    r"""Schema for updating a bank account."""

    id: NotRequired[str]
    r"""The unique identifier of the bank account."""
    name: NotRequired[str]
    r"""The name of the bank account."""
    enabled: NotRequired[bool]
    r"""Whether the bank account is enabled."""
    balance: NotRequired[float]
    r"""Current balance of the bank account."""
    currency: NotRequired[str]
    r"""The currency code for the bank account (ISO 4217)."""
    type: NotRequired[UpdateBankAccountType]
    r"""Type of the bank account."""


class UpdateBankAccountRequestBody(BaseModel):
    r"""Schema for updating a bank account."""

    id: Optional[str] = None
    r"""The unique identifier of the bank account."""

    name: Optional[str] = None
    r"""The name of the bank account."""

    enabled: Optional[bool] = None
    r"""Whether the bank account is enabled."""

    balance: Optional[float] = None
    r"""Current balance of the bank account."""

    currency: Optional[str] = None
    r"""The currency code for the bank account (ISO 4217)."""

    type: Optional[UpdateBankAccountType] = None
    r"""Type of the bank account."""


class UpdateBankAccountRequestTypedDict(TypedDict):
    id_param: str
    request_body: NotRequired[UpdateBankAccountRequestBodyTypedDict]


class UpdateBankAccountRequest(BaseModel):
    id_param: Annotated[
        str,
        pydantic.Field(alias="id"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    request_body: Annotated[
        Optional[UpdateBankAccountRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class UpdateBankAccountResponseTypedDict(TypedDict):
    r"""A single bank account object response."""

    id: str
    r"""Unique identifier for the bank account."""
    name: Nullable[str]
    r"""Name of the bank account."""
    currency: Nullable[str]
    r"""Currency code of the bank account (e.g., USD, EUR)."""
    type: Nullable[str]
    r"""Type of the bank account (e.g., depository, credit)."""
    enabled: bool
    r"""Whether the bank account is enabled."""
    balance: Nullable[float]
    r"""Current balance of the bank account."""
    manual: Nullable[bool]
    r"""Whether the bank account is a manual account."""


class UpdateBankAccountResponse(BaseModel):
    r"""A single bank account object response."""

    id: str
    r"""Unique identifier for the bank account."""

    name: Nullable[str]
    r"""Name of the bank account."""

    currency: Nullable[str]
    r"""Currency code of the bank account (e.g., USD, EUR)."""

    type: Nullable[str]
    r"""Type of the bank account (e.g., depository, credit)."""

    enabled: bool
    r"""Whether the bank account is enabled."""

    balance: Nullable[float]
    r"""Current balance of the bank account."""

    manual: Nullable[bool]
    r"""Whether the bank account is a manual account."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["name", "currency", "type", "balance", "manual"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
